// Circular Queue implementation  C
#include <stdio.h>
#define SIZE 5
int items[SIZE];
int front = -1, rear = -1, element;
// Check if the queue is full
int isFull() {
 if ((front == rear + 1) || (front == 0 && rear == SIZE - 1)) 
 return 1;
 else{
 return 0;
 }
}
// Check if the queue is empty
int isEmpty() {
 if (front == -1) return 1;
 return 0;
}
// Adding an element
void enQueue() {
 if (isFull())
 printf("\n Queue is full!! \n");
 else {
 if (front == -1) front = 0;
 rear = (rear + 1) % SIZE;
 printf("Enter no : ");
 scanf("%d",&element);
 items[rear] = element;
 printf("\n Inserted -> %d", element);
 }
}
// Removing an element
int deQueue() {
 if (isEmpty()) {
 printf("\n Queue is empty !! \n");
 return (-1);
 } else {
 element = items[front];
 if (front == rear) {
 front = -1;
 rear = -1;
 } 
 // Q has only one element, so we reset the 
 // queue after dequeing it. ?
 else {
 front = (front + 1) % SIZE;
 }
 printf("\n Deleted element -> %d \n", element);
 return (element);
 }
}
// Display the queue
void display() {
 int i;
 if (isEmpty())
 printf(" \n Empty Queue\n");
 else {
 printf("\n Front -> %d ", front);
 printf("\n Items -> ");
 for (i = front; i != rear; i = (i + 1) % SIZE) {
 printf("%d ", items[i]);
 }
 printf("%d ", items[i]);
 printf("\n Rear -> %d \n", rear);
 }
}
int main() {
 int choice;
do {
 printf("\n1.enQueue\n2.deQueue\n3.Display\n4.Exit\n");
 printf("\nEnter your choice : ");
 scanf("%d",&choice);
 switch(choice){
 case 1:
 enQueue();
 break;
 case 2:
 deQueue();
 break;
 case 3:
 display();
 break;
 case 4:
 printf("You Exit");
 break;
 default:
 printf("Enter No. btw 1-4 \n");
 }
 }
 while(choice!=4);
 return 0;
}
